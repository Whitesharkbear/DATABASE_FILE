1. 참조문서
    1) MyBatis API(영문) - http://blog.mybatis.org/p/products.html
    2) MyBatis API(한글)
	- http://www.mybatis.org/mybatis-3/ko/java-api.html

    3) JDBC 드라이버 준비 - \\tomcat_home\lib 에 위치!
--------------------------------------------------------------------------------
2.  pom.xml 라이브러리 추가	    
--------------------------------------------------------------------------------
		<!-- JDBC -->
		<dependency>
		 	<groupId>org.springframework</groupId>
		 	<artifactId>spring-jdbc</artifactId>
		 	<version>3.2.5.RELEASE</version>
		</dependency>	
		
		<!-- DBCP -->
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
		</dependency>
		
		<!-- Mybatis -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis</artifactId>
		    <version>3.3.1</version>
		</dependency>
		
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis-spring</artifactId>
		    <version>1.2.4</version>
		</dependency>
--------------------------------------------------------------------------------
3. WEB-INF/spring/root-context.xml
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
	
	<!-- MyBatis -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
  <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
  <property name="url" value="jdbc:oracle:thin:@localhost:1521:XE" />
  <property name="username" value="scott" />
  <property name="password" value="tiger" />
 </bean>
	
	<!-- sqlSessionFactoryBuilder & sqlSessionFactory 생성 -->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
<property name="dataSource" ref="dataSource" />
<property name="mapperLocations" 
		value="classpath:com/web/mapper/*.xml" />
</bean>

<!-- sqlSession 생성 -->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
<constructor-arg index="0" ref="sqlSessionFactory" />
</bean> 

</beans>

--------------------------------------------------------------------------------
4. DAO 클래스 수정 --->  com.mycgv.dao.CgvMemberDAO.java
--------------------------------------------------------------------------------
package com.mycgv.dao;

import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.mycgv.vo.CgvMemberVO;
import com.mycgv.vo.SessionVO;

@Repository
public class CgvMemberDAO {

	@Autowired
	private SqlSessionTemplate sqlSession; 
	
	private static String namespace = "mapper.member";
	
	/**
	 * CGV_MEMBER Login
	 */
	public SessionVO getLoginResult(CgvMemberVO vo){
		return sqlSession.selectOne(namespace +".login",vo);
	}
	
	/**
	 * CGV_MEMBER INSERT
	 */
	public boolean getInsertResult(CgvMemberVO vo){
		boolean result = false;
		int val = sqlSession.insert(namespace +".join",vo);
	
		if(val != 0) result = true;
		return result;	
	}	
	
}//end of dao	

--------------------------------------------------------------------------------
5. com.mycgv.mapper.cgv_member_mapper.xml
-------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.member">
	
	<select id="login" 
		parameterType="com.mycgv.vo.CgvMemberVO" 
		resultMap="loginResult"> 
		select count(*) count, id,name,grade from cgv_member 
				 where id=#{id} and pass=#{pass} 
				 group by id,name,grade
	</select>
	
	<resultMap id="loginResult" 
				type="com.mycgv.vo.SessionVO" > 
		<result property="result" column="count" /> 
	 	<result property="id" column="id" />
	 	<result property="name" column="name" />
	 	<result property="grade" column="grade" />
	</resultMap>

	
	
	<insert id="join" 
			parameterType="com.mycgv.vo.CgvMemberVO" >
		insert into cgv_member
			(id,name,gender,pass,email,address, p_comp,p_number
					,hobby,intro,grade,mdate) 
		values
			(#{id},#{name},#{gender},#{pass},#{email},
			 	#{address},#{p_comp},#{p_number},#{hobbyList},
			 	#{intro},'vip',sysdate)
	</insert> 
</mapper>
--------------------------------------------------------------------------------
6.  com.myspring.service.MemberServiceImpl.java
--------------------------------------------------------------------------------
@Resource(name="memberDAO")
private CgvMemberDAO memberDAO;

로 처리되었던 코드를 @Autowired 어노테이션으로 수정!!
@Autowired
private CgvMemberDAO memberDAO;

--------------------------------------------------------------------------------
7.  servlet-context.xml
--------------------------------------------------------------------------------
1) 컨테이너에서 생성해주는 Bean 생성 부분 주석처리
2) DAO 객체를 Autowired 하는 변수에 객체를 찾아 Injection 할 수 
   있도록 component-scan 추가
  <context:component-scan base-package="com.mycgv.dao" />

////////////////////
package com.myspring.myCGV;

import java.io.File;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.mycgv.dao.CgvMemberDAO;
import com.mycgv.dao.CgvNoticeDAO;
import com.mycgv.vo.CgvMemberVO;
import com.mycgv.vo.CgvNoticeVO;

@Controller
public class AdminController {

	@RequestMapping(value="/admin.do", method=RequestMethod.GET)
	public String admin(){
		return "/admin/admin";
	}
	
	@RequestMapping(value="/admin_member.do", method=RequestMethod.GET)
	public ModelAndView admin_member(String rpage){
		ModelAndView mv = new ModelAndView();
		
		CgvMemberDAO dao = new CgvMemberDAO();
		
		//페이징 처리 - startCount, endCount 구하기
		int startCount = 0;
		int endCount = 0;
		int pageSize = 5;	//한페이지당 게시물 수
		int reqPage = 1;	//요청페이지	
		int pageCount = 1;	//전체 페이지 수
//		int dbCount = dao.getTotalCount();	//DB에서 가져온 전체 행수
		int dbCount = 15;	//DB에서 가져온 전체 행수
		
		//총 페이지 수 계산
		if(dbCount % pageSize == 0){
			pageCount = dbCount/pageSize;
		}else{
			pageCount = dbCount/pageSize+1;
		}
		
		//요청 페이지 계산
		if(rpage != null){
			reqPage = Integer.parseInt(rpage);
			startCount = (reqPage-1) * pageSize+1;
			endCount = reqPage *pageSize;
		}else{
			reqPage = 1;
			startCount = 1;
			endCount = pageSize;
		}

		//회원전체 리스트 
		ArrayList<CgvMemberVO> list = dao.getTotalList(startCount, endCount);
		
		mv.addObject("list", list);
		mv.addObject("dbCount", dbCount);
		mv.addObject("rpage", reqPage);
		mv.addObject("pageSize", pageSize);
		mv.setViewName("/admin/admin_member");
		
		return mv;
	}

	@RequestMapping(value="/admin_member_content.do", method=RequestMethod.GET)
	public ModelAndView admin_member_content(String id, String rno){
		ModelAndView mv = new ModelAndView();
		
		CgvMemberDAO dao = new CgvMemberDAO();
		CgvMemberVO vo = dao.getResultVO(id);
		
		mv.addObject("vo", vo);
		mv.addObject("id", id);
		mv.addObject("rno", rno);
		mv.setViewName("/admin/admin_member_content");
		
		return mv;
	}

	
	
	@RequestMapping(value="/admin_notice.do", method=RequestMethod.GET)
	public ModelAndView admin_notice(String rpage){
		ModelAndView mv = new ModelAndView();
		CgvNoticeDAO dao = new CgvNoticeDAO();	

		//페이징 처리 - startCount, endCount 구하기
		int startCount = 0;
		int endCount = 0;
		int pageSize = 5;	//한페이지당 게시물 수
		int reqPage = 1;	//요청페이지	
		int pageCount = 1;	//전체 페이지 수
		int dbCount = dao.getTotalCount();	//DB에서 가져온 전체 행수
		
		//총 페이지 수 계산
		if(dbCount % pageSize == 0){
			pageCount = dbCount/pageSize;
		}else{
			pageCount = dbCount/pageSize+1;
		}

		//요청 페이지 계산
		if(rpage != null){
			reqPage = Integer.parseInt(rpage);
			startCount = (reqPage-1) * pageSize+1;
			endCount = reqPage *pageSize;
		}else{
			reqPage = 1;
			startCount = 1;
			endCount = pageSize;
		}

		ArrayList<CgvNoticeVO> list = dao.getTotalList(startCount, endCount);
		
		mv.addObject("list", list);
		mv.addObject("dbCount", dbCount);
		mv.addObject("rpage", reqPage);
		mv.addObject("pageSize", pageSize);
		mv.setViewName("/admin/admin_notice_list");
		
		return mv;
	}
	
	@RequestMapping(value="/admin_notice_write.do")	
	public String admin_notice_write(){
		return "/admin/admin_notice_write";
	}
	
	@RequestMapping(value="/admin_notice_write_proc.do",
			method=RequestMethod.POST)	
	public ModelAndView admin_notice_write_proc(CgvNoticeVO vo,
			HttpServletRequest request) throws Exception{
		ModelAndView mv = new ModelAndView();
		String root_path="",att_path="", bfname=""; 
		
		if(vo.getFile1().getOriginalFilename() != null
				&& vo.getFile1().getOriginalFilename() != ""){
			//1. 저장위치
			root_path 
			= request.getSession().getServletContext().getRealPath("/");
			att_path = "\\resources\\upload\\";
			
			//2. 파일명 설정
			UUID uuid = UUID.randomUUID();
			bfname = uuid+"_"+vo.getFile1().getOriginalFilename();
			
			//3. VO 파일명 추가
			vo.setNfile(bfname);
			vo.setOnfile(vo.getFile1().getOriginalFilename());
		}
		
		CgvNoticeDAO dao = new CgvNoticeDAO();
		boolean result = dao.getInsertResult(vo);
		
		if(result){  
			File file = new File(root_path + att_path + bfname);
			vo.getFile1().transferTo(file);
			
			mv.setViewName("redirect:/admin_notice.do");
		}
				
		return mv;
	}
	
	
	@RequestMapping(value="/admin_notice_content.do")	
	public ModelAndView admin_notice_content(String nid, String rno){
		ModelAndView mv = new ModelAndView();
		
		CgvNoticeDAO dao = new CgvNoticeDAO();
		CgvNoticeVO vo = dao.getResultVO(nid);
				
		mv.addObject("vo", vo);
		mv.addObject("rno",rno);
		mv.addObject("nid",nid);
		mv.setViewName("/admin/admin_notice_content");
		
		return mv;
	}
	
	
	@RequestMapping(value="/admin_notice_update.do")	
	public ModelAndView admin_notice_update(String nid, String rno){
		ModelAndView mv = new ModelAndView();
		
		CgvNoticeDAO dao = new CgvNoticeDAO();
		CgvNoticeVO vo = dao.getResultVO(nid);
				
		mv.addObject("vo", vo);
		mv.addObject("rno",rno);
		mv.addObject("nid",nid);
		mv.setViewName("/admin/admin_notice_update");
		
		return mv;
	}
	
	@RequestMapping(value="/admin_notice_update_proc.do")	
	public ModelAndView admin_notice_update_proc(CgvNoticeVO vo){
		ModelAndView mv = new ModelAndView();
		
		CgvNoticeDAO dao = new CgvNoticeDAO();
		boolean result = dao.getUpdateResult(vo);
				
		if(result) mv.setViewName("redirect:/admin_notice.do");
		
		return mv;
	}
	
	@RequestMapping(value="/admin_notice_delete.do")	
	public ModelAndView admin_notice_delete(String nid, String rno){
		ModelAndView mv = new ModelAndView();
		
		mv.addObject("rno",rno);
		mv.addObject("nid",nid);
		mv.setViewName("/admin/admin_notice_delete");
		
		return mv;
	}
	
	@RequestMapping(value="/admin_notice_delete_proc.do")	
	public ModelAndView admin_notice_delete_proc(String nid, String rno){
		ModelAndView mv = new ModelAndView();
		
		CgvNoticeDAO dao = new CgvNoticeDAO();	
		boolean result = dao.getDeleteResult(nid);
		
		if(result) mv.setViewName("redirect:/admin_notice.do");
		
		return mv;
	}
	
	@RequestMapping(value="/admin_notice_select_delete.do")	
	public ModelAndView admin_notice_select_delete(String chkList){
		ModelAndView mv = new ModelAndView();
				
		StringTokenizer st = new StringTokenizer(chkList,",");
		//배열생성  --> 생성된 배열에 token(String) 저장
		String[] stArray = new String[st.countTokens()];
		for(int i=0; i<stArray.length;i++){
			stArray[i] = st.nextToken();
		}
		
		CgvNoticeDAO dao = new CgvNoticeDAO();
		String[] fileArray = dao.getSelectDeleteFileList(stArray);
		boolean result = dao.getSelectDeleteResult(stArray);	
				
		if(result) mv.setViewName("redirect:/admin_notice.do");
		
		return mv;
	}
}
















